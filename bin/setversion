#!/usr/bin/env php
<?php

requireAutoloader();

function requireAutoloader()
{
    $autoloadPaths = [
        // Package was included as a library
        __DIR__ . '/../../../autoload.php',
        // Local package usage
        __DIR__ . '/../vendor/autoload.php',
        // Local package in packages folder
        __DIR__ . '/../../../vendor/autoload.php',
        __DIR__ . '/../../../../vendor/autoload.php',
        // Local package in packages folder as symlink in extension
        __DIR__ . '/../../../.Build/vendor/autoload.php',
    ];
    foreach ($autoloadPaths as $path) {
        if (file_exists($path)) {
            /** @noinspection PhpIncludeInspection */
            return file_exists($path) && include $path;
        }
    }

    $msg = 'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -sS https://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL;
    fwrite(STDERR, $msg);
    exit(1);
}

if (4 < count($argv)) {
    die('Set Version requires no more than three parameters: version, stability and optional directory' . PHP_EOL);
}

$stability = \NamelessCoder\TYPO3RepositoryClient\Versioner::STABILITY_STABLE;
$directory = trim(shell_exec('pwd'));
if (4 === count($argv)) {
    [, $version, $stability, $directory] = $argv;
} elseif (3 === count($argv)) {
    [, $version, $stability] = $argv;
} elseif (2 === count($argv)) {
    [, $version] = $argv;
}

if (empty($version)) {
    die('Version is a required parameter' . PHP_EOL);
}

$versioner = new \NamelessCoder\TYPO3RepositoryClient\Versioner();

try {
    $versioner->write($directory, $version, $stability);
    echo 'Version updated to ' . $version . '-' . $stability . PHP_EOL;
} catch (\RuntimeException $error) {
    echo 'Runtime error: ' . $error->getMessage() . PHP_EOL;
    exit(1);
}

exit(0);
